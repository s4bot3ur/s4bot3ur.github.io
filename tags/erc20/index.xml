<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>ERC20 on S4b03ur's Website</title><link>https://s4bot3ur.github.io/tags/erc20/</link><description>Recent content in ERC20 on S4b03ur's Website</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright Â© 2024-2024 s4bot3ur. All Rights Reserved.</copyright><lastBuildDate>Wed, 23 Oct 2024 01:29:00 +0530</lastBuildDate><atom:link href="https://s4bot3ur.github.io/tags/erc20/index.xml" rel="self" type="application/rss+xml"/><item><title>Baby ERC 20</title><link>https://s4bot3ur.github.io/blogs/tcp1p-2024/baby-erc-20/</link><pubDate>Wed, 23 Oct 2024 01:29:00 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/tcp1p-2024/baby-erc-20/</guid><description><![CDATA[<h1 id="writeup-for-baby-erc-20" data-numberify>Writeup for BABY ERC-20<a class="anchor ms-1" href="#writeup-for-baby-erc-20"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. In order to understand this writeup you need to understand foundry.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>No Description given</p>

<h3 id="key-concepts-to-learn" data-numberify>Key Concepts to Learn<a class="anchor ms-1" href="#key-concepts-to-learn"></a></h3>
<p>In order to solve this challenge we need to understand <code>overflows</code> and <code>underflows</code> in solidity.</p>
<div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">overflow_underflow</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kt">uint8</span> <span class="n">overflow</span><span class="o">=</span><span class="mi">255</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="kt">uint8</span> <span class="n">underflow</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="kd">function</span> <span class="nf">increment</span><span class="p">()</span><span class="k">public</span><span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">overflow</span><span class="o">++</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="kd">function</span> <span class="nf">decrement</span><span class="p">()</span><span class="k">public</span><span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="n">underflow</span><span class="o">--</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div><p>The above contract is a good example to understand overflows and underflows. The state variable <code>overflow</code> is set to 255, and the state variable <code>underflow</code> is set to 0.</p>]]></description></item><item><title>Stake</title><link>https://s4bot3ur.github.io/blogs/ethernaut/stake/</link><pubDate>Wed, 23 Oct 2024 01:23:11 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/stake/</guid><description><![CDATA[<h1 id="writeup-for-stake" data-numberify>Writeup for Stake<a class="anchor ms-1" href="#writeup-for-stake"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Stake is safe for staking native ETH and ERC20 WETH, considering the same 1:1 value of the tokens. Can you drain the contract?</p>]]></description></item><item><title>GoodSamaritan</title><link>https://s4bot3ur.github.io/blogs/ethernaut/goodsamaritan/</link><pubDate>Wed, 23 Oct 2024 01:19:59 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/goodsamaritan/</guid><description><![CDATA[<h1 id="writeup-for-good-samaritan" data-numberify>Writeup for Good Samaritan<a class="anchor ms-1" href="#writeup-for-good-samaritan"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This instance represents a Good Samaritan that is wealthy and ready to donate some coins to anyone requesting it.</p>]]></description></item><item><title>DoubleEntryPoint</title><link>https://s4bot3ur.github.io/blogs/ethernaut/doubleentrypoint/</link><pubDate>Wed, 23 Oct 2024 01:19:13 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/doubleentrypoint/</guid><description><![CDATA[<h1 id="writeup-for-doubleentrypoint" data-numberify>Writeup for DoubleEntryPoint<a class="anchor ms-1" href="#writeup-for-doubleentrypoint"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This level features a CryptoVault with special functionality, the sweepToken function. This is a common function used to retrieve tokens stuck in a contract. The CryptoVault operates with an underlying token that can&rsquo;t be swept, as it is an important core logic component of the CryptoVault. Any other tokens can be swept.</p>]]></description></item><item><title>NaughtCoin</title><link>https://s4bot3ur.github.io/blogs/ethernaut/naughtcoin/</link><pubDate>Wed, 23 Oct 2024 01:11:24 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/naughtcoin/</guid><description><![CDATA[<h1 id="writeup-for-naught-coin" data-numberify>Writeup for Naught Coin<a class="anchor ms-1" href="#writeup-for-naught-coin"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>NaughtCoin is an ERC20 token and you&rsquo;re already holding all of them. The catch is that you&rsquo;ll only be able to transfer them after a 10-year lockout period. Can you figure out how to get them out to another address so that you can transfer them freely? Complete this level by getting your token balance to 0.</p>]]></description></item><item><title>Token</title><link>https://s4bot3ur.github.io/blogs/ethernaut/token/</link><pubDate>Wed, 23 Oct 2024 00:59:22 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/token/</guid><description><![CDATA[<h1 id="writeup-for-token" data-numberify>Writeup for Token<a class="anchor ms-1" href="#writeup-for-token"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity well. For each challenge, they will deploy the contract and provide us with the instance of that contract. Our task is to interact with the contract and exploit it. Don&rsquo;t worry if you are completely new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>The goal of this level is for you to hack the basic token contract below.</li>
<li>You are given 20 tokens to start with, and you will beat the level if you somehow manage to get your hands on any additional tokens, preferably a very large amount of tokens.</li>
</ul>

<h3 id="contract-explanation" data-numberify>Contract Explanation<a class="anchor ms-1" href="#contract-explanation"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">Token</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="n">balances</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="kt">uint256</span> <span class="k">public</span> <span class="n">totalSupply</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="kd">constructor</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_initialSupply</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">totalSupply</span> <span class="o">=</span> <span class="n">_initialSupply</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="kd">function</span> <span class="nf">transfer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="nb">require</span><span class="p">(</span><span class="n">balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">-</span> <span class="n">_value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">-=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="n">balances</span><span class="p">[</span><span class="n">_to</span><span class="p">]</span> <span class="o">+=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="kd">function</span> <span class="nf">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="nb">balance</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="k">return</span> <span class="n">balances</span><span class="p">[</span><span class="n">_owner</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<ul>
<li>
<p>If you feel like you understand the contract, you can move to the <a href="/blogs/ethernaut/token/#exploit">exploit</a> part. If you are a beginner, please go through the Contract Explanation as well. It will help you understand Solidity better.</p>]]></description></item></channel></rss>