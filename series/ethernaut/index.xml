<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Ethernaut on S4b03ur's Website</title><link>https://s4bot3ur.github.io/series/ethernaut/</link><description>Recent content in Ethernaut on S4b03ur's Website</description><generator>Hugo</generator><language>en-us</language><copyright>Copyright Â© 2024-2025 s4bot3ur. All Rights Reserved.</copyright><lastBuildDate>Wed, 23 Oct 2024 01:23:11 +0530</lastBuildDate><atom:link href="https://s4bot3ur.github.io/series/ethernaut/index.xml" rel="self" type="application/rss+xml"/><item><title>Stake</title><link>https://s4bot3ur.github.io/blogs/ethernaut/stake/</link><pubDate>Wed, 23 Oct 2024 01:23:11 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/stake/</guid><description><![CDATA[<h1 id="writeup-for-stake" data-numberify>Writeup for Stake<a class="anchor ms-1" href="#writeup-for-stake"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Stake is safe for staking native ETH and ERC20 WETH, considering the same 1:1 value of the tokens. Can you drain the contract?</p>]]></description></item><item><title>HigherOrder</title><link>https://s4bot3ur.github.io/blogs/ethernaut/higherorder/</link><pubDate>Wed, 23 Oct 2024 01:22:21 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/higherorder/</guid><description><![CDATA[<h1 id="writeup-for-higher-order" data-numberify>Writeup for Higher Order<a class="anchor ms-1" href="#writeup-for-higher-order"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Imagine a world where the rules are meant to be broken, and only the cunning and the bold can rise to power. Welcome to the Higher Order, a group shrouded in mystery, where a treasure awaits and a commander rules supreme.</p>]]></description></item><item><title>Switch</title><link>https://s4bot3ur.github.io/blogs/ethernaut/switch/</link><pubDate>Wed, 23 Oct 2024 01:21:33 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/switch/</guid><description><![CDATA[<h1 id="writeup-for-switch" data-numberify>Writeup for Switch<a class="anchor ms-1" href="#writeup-for-switch"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Just have to flip the switch. Can&rsquo;t be that hard, right?</p>]]></description></item><item><title>GateKeeperThree</title><link>https://s4bot3ur.github.io/blogs/ethernaut/gatekeeperthree/</link><pubDate>Wed, 23 Oct 2024 01:20:50 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/gatekeeperthree/</guid><description><![CDATA[<h1 id="writeup-for-gatekeeper-three" data-numberify>Writeup for Gatekeeper Three<a class="anchor ms-1" href="#writeup-for-gatekeeper-three"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Cope with gates and become an entrant.</p>]]></description></item><item><title>GoodSamaritan</title><link>https://s4bot3ur.github.io/blogs/ethernaut/goodsamaritan/</link><pubDate>Wed, 23 Oct 2024 01:19:59 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/goodsamaritan/</guid><description><![CDATA[<h1 id="writeup-for-good-samaritan" data-numberify>Writeup for Good Samaritan<a class="anchor ms-1" href="#writeup-for-good-samaritan"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This instance represents a Good Samaritan that is wealthy and ready to donate some coins to anyone requesting it.</p>]]></description></item><item><title>DoubleEntryPoint</title><link>https://s4bot3ur.github.io/blogs/ethernaut/doubleentrypoint/</link><pubDate>Wed, 23 Oct 2024 01:19:13 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/doubleentrypoint/</guid><description><![CDATA[<h1 id="writeup-for-doubleentrypoint" data-numberify>Writeup for DoubleEntryPoint<a class="anchor ms-1" href="#writeup-for-doubleentrypoint"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This level features a CryptoVault with special functionality, the sweepToken function. This is a common function used to retrieve tokens stuck in a contract. The CryptoVault operates with an underlying token that can&rsquo;t be swept, as it is an important core logic component of the CryptoVault. Any other tokens can be swept.</p>]]></description></item><item><title>PuzzleWallet</title><link>https://s4bot3ur.github.io/blogs/ethernaut/puzzlewallet/</link><pubDate>Wed, 23 Oct 2024 01:18:13 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/puzzlewallet/</guid><description><![CDATA[<h1 id="writeup-for-puzzle-wallet" data-numberify>Writeup for Puzzle Wallet<a class="anchor ms-1" href="#writeup-for-puzzle-wallet"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Nowadays, paying for DeFi operations is impossible, fact.</p>]]></description></item><item><title>DexTwo</title><link>https://s4bot3ur.github.io/blogs/ethernaut/dextwo/</link><pubDate>Wed, 23 Oct 2024 01:17:23 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/dextwo/</guid><description><![CDATA[<h1 id="writeup-for-dex-two" data-numberify>Writeup for Dex Two<a class="anchor ms-1" href="#writeup-for-dex-two"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This level will ask you to break DexTwo, a subtly modified Dex contract from the previous level, in a different way.</p>]]></description></item><item><title>Dex</title><link>https://s4bot3ur.github.io/blogs/ethernaut/dex/</link><pubDate>Wed, 23 Oct 2024 01:16:37 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/dex/</guid><description><![CDATA[<h1 id="writeup-for-dex" data-numberify>Writeup for Dex<a class="anchor ms-1" href="#writeup-for-dex"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>The goal of this level is for you to hack the basic DEX contract below and steal the funds by price manipulation.</p>]]></description></item><item><title>Shop</title><link>https://s4bot3ur.github.io/blogs/ethernaut/shop/</link><pubDate>Wed, 23 Oct 2024 01:15:54 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/shop/</guid><description><![CDATA[<h1 id="writeup-for-shop" data-numberify>Writeup for Shop<a class="anchor ms-1" href="#writeup-for-shop"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Can you get the item from the shop for less than the price asked?</p>]]></description></item><item><title>Denial</title><link>https://s4bot3ur.github.io/blogs/ethernaut/denial/</link><pubDate>Wed, 23 Oct 2024 01:15:07 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/denial/</guid><description><![CDATA[<h1 id="writeup-for-denial" data-numberify>Writeup for Denial<a class="anchor ms-1" href="#writeup-for-denial"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This is a simple wallet that drips funds over time. You can withdraw the funds slowly by becoming a withdrawing partner.</p>]]></description></item><item><title>AlienCodex</title><link>https://s4bot3ur.github.io/blogs/ethernaut/aliencodex/</link><pubDate>Wed, 23 Oct 2024 01:14:27 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/aliencodex/</guid><description><![CDATA[<h1 id="writeup-for-alien-codex" data-numberify>Writeup for Alien Codex<a class="anchor ms-1" href="#writeup-for-alien-codex"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Hello hacker, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>]]></description></item><item><title>Recovery</title><link>https://s4bot3ur.github.io/blogs/ethernaut/recovery/</link><pubDate>Wed, 23 Oct 2024 01:13:08 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/recovery/</guid><description><![CDATA[<h1 id="writeup-for-recovery" data-numberify>Writeup for Recovery<a class="anchor ms-1" href="#writeup-for-recovery"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>In this challenge, a contract creator has built a simple token factory contract. Creating new tokens is a breeze. After deploying the first token contract, the creator sent 0.001 ether to obtain more tokens. Unfortunately, they have lost the contract address.</p>]]></description></item><item><title>Preservation</title><link>https://s4bot3ur.github.io/blogs/ethernaut/preservation/</link><pubDate>Wed, 23 Oct 2024 01:11:59 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/preservation/</guid><description><![CDATA[<h1 id="writeup-for-preservation" data-numberify>Writeup for Preservation<a class="anchor ms-1" href="#writeup-for-preservation"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This contract utilizes a library to store two different times for two different timezones. The constructor creates two instances of the library for each time to be stored.</p>]]></description></item><item><title>NaughtCoin</title><link>https://s4bot3ur.github.io/blogs/ethernaut/naughtcoin/</link><pubDate>Wed, 23 Oct 2024 01:11:24 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/naughtcoin/</guid><description><![CDATA[<h1 id="writeup-for-naught-coin" data-numberify>Writeup for Naught Coin<a class="anchor ms-1" href="#writeup-for-naught-coin"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>NaughtCoin is an ERC20 token and you&rsquo;re already holding all of them. The catch is that you&rsquo;ll only be able to transfer them after a 10-year lockout period. Can you figure out how to get them out to another address so that you can transfer them freely? Complete this level by getting your token balance to 0.</p>]]></description></item><item><title>GateKeeperTwo</title><link>https://s4bot3ur.github.io/blogs/ethernaut/gatekeepertwo/</link><pubDate>Wed, 23 Oct 2024 01:10:42 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/gatekeepertwo/</guid><description><![CDATA[<h1 id="writeup-for-gatekeeper-two" data-numberify>Writeup for Gatekeeper Two<a class="anchor ms-1" href="#writeup-for-gatekeeper-two"></a></h1>
<p>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. Each challenge involves deploying a contract and exploiting its vulnerabilities. If you&rsquo;re new to Solidity and haven&rsquo;t deployed a smart contract before, you can learn how to do so using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</p>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This gatekeeper introduces new challenges. Your task is to register as an entrant to pass this level.</p>]]></description></item><item><title>GateKeeperOne</title><link>https://s4bot3ur.github.io/blogs/ethernaut/gatekeeperone/</link><pubDate>Wed, 23 Oct 2024 01:09:38 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/gatekeeperone/</guid><description><![CDATA[<h1 id="writeup-for-gatekeeper-one" data-numberify>Writeup for Gatekeeper One<a class="anchor ms-1" href="#writeup-for-gatekeeper-one"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. For each challenge, a contract will be deployed, and an instance will be provided. Your task is to interact with the contract and exploit its vulnerabilities. Don&rsquo;t worry if you are new to Solidity and have never deployed a smart contract. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>Make it past the gatekeeper and register as an entrant to pass this level.</p>]]></description></item><item><title>Privacy</title><link>https://s4bot3ur.github.io/blogs/ethernaut/privacy/</link><pubDate>Wed, 23 Oct 2024 01:08:16 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/privacy/</guid><description><![CDATA[<h1 id="writeup-for-privacy" data-numberify>Writeup for Privacy<a class="anchor ms-1" href="#writeup-for-privacy"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. For each challenge, a contract will be deployed, and an instance will be provided. Your task is to interact with the contract and exploit its vulnerabilities. Don&rsquo;t worry if you are new to Solidity and have never deployed a smart contract. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>The creator of this contract was careful enough to protect the sensitive areas of its storage.</p>]]></description></item><item><title>Elevator</title><link>https://s4bot3ur.github.io/blogs/ethernaut/elevator/</link><pubDate>Wed, 23 Oct 2024 01:07:38 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/elevator/</guid><description><![CDATA[<h1 id="writeup-for-elevator" data-numberify>Writeup for Elevator<a class="anchor ms-1" href="#writeup-for-elevator"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. For each challenge, a contract will be deployed, and an instance will be provided. Your task is to interact with the contract and exploit its vulnerabilities. Don&rsquo;t worry if you are new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>This elevator won&rsquo;t let you reach the top of your building. Right?</p>]]></description></item><item><title>ReEntrancy</title><link>https://s4bot3ur.github.io/blogs/ethernaut/reentrancy/</link><pubDate>Wed, 23 Oct 2024 01:04:38 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/reentrancy/</guid><description><![CDATA[<h1 id="writeup-for-re-entrancy" data-numberify>Writeup for Re-entrancy<a class="anchor ms-1" href="#writeup-for-re-entrancy"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. For each challenge, a contract will be deployed, and an instance will be provided. Your task is to interact with the contract and exploit its vulnerabilities. Don&rsquo;t worry if you are new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge-description" data-numberify>Challenge Description<a class="anchor ms-1" href="#challenge-description"></a></h3>
<p>The goal of this level is for you to steal all the funds from the contract.</p>]]></description></item><item><title>King</title><link>https://s4bot3ur.github.io/blogs/ethernaut/king/</link><pubDate>Wed, 23 Oct 2024 01:03:39 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/king/</guid><description><![CDATA[<h1 id="writeup-for-king" data-numberify>Writeup for King<a class="anchor ms-1" href="#writeup-for-king"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. For each challenge, a contract will be deployed, and an instance will be provided. Your task is to interact with the contract and exploit its vulnerabilities. Don&rsquo;t worry if you are new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>
<p>The contract below represents a very simple game: whoever sends an amount of ether that is larger than the current prize becomes the new king. On such an event, the overthrown king gets paid the new prize, making a bit of ether in the process! It&rsquo;s as ponzi as it gets xD</p>]]></description></item><item><title>Vault</title><link>https://s4bot3ur.github.io/blogs/ethernaut/vault/</link><pubDate>Wed, 23 Oct 2024 01:02:35 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/vault/</guid><description><![CDATA[<h1 id="writeup-for-vault" data-numberify>Writeup for Vault<a class="anchor ms-1" href="#writeup-for-vault"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity better. For each challenge, a contract will be deployed and its instance will be provided. Your task is to interact with the contract and exploit its vulnerabilities. Don&rsquo;t worry if you are new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>The goal of this level is to unlock the vault and pass the challenge!</li>
</ul>

<h3 id="contract-explanation" data-numberify>Contract Explanation<a class="anchor ms-1" href="#contract-explanation"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">Vault</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kt">bool</span> <span class="k">public</span> <span class="n">locked</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="kt">bytes32</span> <span class="k">private</span> <span class="n">password</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="kd">constructor</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">_password</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">locked</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">        <span class="n">password</span> <span class="o">=</span> <span class="n">_password</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="kd">function</span> <span class="nf">unlock</span><span class="p">(</span><span class="kt">bytes32</span> <span class="n">_password</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">password</span> <span class="o">==</span> <span class="n">_password</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">            <span class="n">locked</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<p>If you feel like you understand the contract, you can move to the <a href="/blogs/ethernaut/vault/#exploit">exploit</a> part. If you are a beginner, please go through the Contract Explanation as well. It will help you understand Solidity better.</p>]]></description></item><item><title>Force</title><link>https://s4bot3ur.github.io/blogs/ethernaut/force/</link><pubDate>Wed, 23 Oct 2024 01:02:03 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/force/</guid><description><![CDATA[<h1 id="writeup-for-force" data-numberify>Writeup for Force<a class="anchor ms-1" href="#writeup-for-force"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity well. For each challenge, they will deploy the contract and provide us with the instance of that contract. Our task is to interact with the contract and exploit it. Don&rsquo;t worry if you are completely new to Solidity and have never deployed a smart contract. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>The goal of this level is to make the balance of the contract greater than zero.</li>
</ul>

<h3 id="contract-explanation" data-numberify>Contract Explanation<a class="anchor ms-1" href="#contract-explanation"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">Force</span> <span class="p">{</span> <span class="cm">/*
</span></span></span><span class="line"><span class="ln"> 5</span><span class="cl"><span class="cm">                   MEOW ?
</span></span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="cm">         /\_/\   /
</span></span></span><span class="line"><span class="ln"> 7</span><span class="cl"><span class="cm">    ____/ o o \
</span></span></span><span class="line"><span class="ln"> 8</span><span class="cl"><span class="cm">    /~____  =Ã¸= /
</span></span></span><span class="line"><span class="ln"> 9</span><span class="cl"><span class="cm">    (______)__m_m)
</span></span></span><span class="line"><span class="ln">10</span><span class="cl"><span class="cm">                   */</span> <span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<p>If you understand the contract, you can move to the <a href="/blogs/ethernaut/force/#exploit">exploit</a> part. If you are a beginner, please go through the Contract Explanation as well. It will help you understand Solidity better.</p>]]></description></item><item><title>Delegation</title><link>https://s4bot3ur.github.io/blogs/ethernaut/delegation/</link><pubDate>Wed, 23 Oct 2024 01:00:56 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/delegation/</guid><description><![CDATA[<h1 id="writeup-for-delegation" data-numberify>Writeup for Delegation<a class="anchor ms-1" href="#writeup-for-delegation"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity well. For each challenge, they will deploy the contract and provide us with the instance of that contract. Our task is to interact with the contract and exploit it. Don&rsquo;t worry if you are completely new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>The goal of this level is for you to claim ownership of the instance you are given.</li>
</ul>

<h3 id="contract-explanation" data-numberify>Contract Explanation<a class="anchor ms-1" href="#contract-explanation"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">Delegate</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kt">address</span> <span class="k">public</span> <span class="n">owner</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="kd">constructor</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">owner</span> <span class="o">=</span> <span class="n">_owner</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="kd">function</span> <span class="nf">pwn</span><span class="p">()</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="n">owner</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl"><span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="kd">contract</span> <span class="nc">Delegation</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="kt">address</span> <span class="k">public</span> <span class="n">owner</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="n">Delegate</span> <span class="n">delegate</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">
</span></span><span class="line"><span class="ln">20</span><span class="cl">    <span class="kd">constructor</span><span class="p">(</span><span class="kt">address</span> <span class="n">_delegateAddress</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">        <span class="n">delegate</span> <span class="o">=</span> <span class="n">Delegate</span><span class="p">(</span><span class="n">_delegateAddress</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">        <span class="n">owner</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="n">fallback</span><span class="p">()</span> <span class="k">external</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">        <span class="p">(</span><span class="kt">bool</span> <span class="n">result</span><span class="p">,)</span> <span class="o">=</span> <span class="kt">address</span><span class="p">(</span><span class="n">delegate</span><span class="p">).</span><span class="nb">delegatecall</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">data</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">27</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="n">result</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">            <span class="nb">this</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<p>If you feel like you understand the contract, you can move to the <a href="/blogs/ethernaut/delegation/#exploit">exploit</a> part. If you are a beginner, please go through the Contract Explanation as well. It will help you understand Solidity better.</p>]]></description></item><item><title>Token</title><link>https://s4bot3ur.github.io/blogs/ethernaut/token/</link><pubDate>Wed, 23 Oct 2024 00:59:22 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/token/</guid><description><![CDATA[<h1 id="writeup-for-token" data-numberify>Writeup for Token<a class="anchor ms-1" href="#writeup-for-token"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity well. For each challenge, they will deploy the contract and provide us with the instance of that contract. Our task is to interact with the contract and exploit it. Don&rsquo;t worry if you are completely new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>The goal of this level is for you to hack the basic token contract below.</li>
<li>You are given 20 tokens to start with, and you will beat the level if you somehow manage to get your hands on any additional tokens, preferably a very large amount of tokens.</li>
</ul>

<h3 id="contract-explanation" data-numberify>Contract Explanation<a class="anchor ms-1" href="#contract-explanation"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">Token</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="n">balances</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">    <span class="kt">uint256</span> <span class="k">public</span> <span class="n">totalSupply</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">    <span class="kd">constructor</span><span class="p">(</span><span class="kt">uint256</span> <span class="n">_initialSupply</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">        <span class="n">balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">totalSupply</span> <span class="o">=</span> <span class="n">_initialSupply</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="kd">function</span> <span class="nf">transfer</span><span class="p">(</span><span class="kt">address</span> <span class="n">_to</span><span class="p">,</span> <span class="kt">uint256</span> <span class="n">_value</span><span class="p">)</span> <span class="k">public</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">bool</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">        <span class="nb">require</span><span class="p">(</span><span class="n">balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">-</span> <span class="n">_value</span> <span class="o">&gt;=</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">balances</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">-=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="n">balances</span><span class="p">[</span><span class="n">_to</span><span class="p">]</span> <span class="o">+=</span> <span class="n">_value</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">        <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">18</span><span class="cl">
</span></span><span class="line"><span class="ln">19</span><span class="cl">    <span class="kd">function</span> <span class="nf">balanceOf</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span> <span class="nb">balance</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="k">return</span> <span class="n">balances</span><span class="p">[</span><span class="n">_owner</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<ul>
<li>
<p>If you feel like you understand the contract, you can move to the <a href="/blogs/ethernaut/token/#exploit">exploit</a> part. If you are a beginner, please go through the Contract Explanation as well. It will help you understand Solidity better.</p>]]></description></item><item><title>Telephone</title><link>https://s4bot3ur.github.io/blogs/ethernaut/telephone/</link><pubDate>Wed, 23 Oct 2024 00:58:41 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/telephone/</guid><description><![CDATA[<h1 id="writeup-for-telephone" data-numberify>Writeup for Telephone<a class="anchor ms-1" href="#writeup-for-telephone"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity well. For each challenge, they will deploy the contract and provide us with the instance of that contract. Our task is to interact with the contract and exploit it. Don&rsquo;t worry if you are completely new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>Claim ownership of the contract below to complete this level.</li>
</ul>

<h3 id="contract-explanation" data-numberify>Contract Explanation<a class="anchor ms-1" href="#contract-explanation"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">8</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kd">contract</span> <span class="nc">Telephone</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">    <span class="kt">address</span> <span class="k">public</span> <span class="n">owner</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 6</span><span class="cl">
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="kd">constructor</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">        <span class="n">owner</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">
</span></span><span class="line"><span class="ln">11</span><span class="cl">    <span class="kd">function</span> <span class="nf">changeOwner</span><span class="p">(</span><span class="kt">address</span> <span class="n">_owner</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">12</span><span class="cl">        <span class="k">if</span> <span class="p">(</span><span class="nb">tx</span><span class="p">.</span><span class="nb">origin</span> <span class="o">!=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">            <span class="n">owner</span> <span class="o">=</span> <span class="n">_owner</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="p">}</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<ul>
<li>
<p>If you feel like you understand the contract, you can move to the <a href="/blogs/ethernaut/telephone/#exploit">exploit</a> part. If you are a beginner, please go through the Contract Explanation as well. It will help you understand Solidity better.</p>]]></description></item><item><title>Coin Flip</title><link>https://s4bot3ur.github.io/blogs/ethernaut/coin-flip/</link><pubDate>Wed, 23 Oct 2024 00:57:29 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/coin-flip/</guid><description><![CDATA[<h1 id="writeup-for-coinflip" data-numberify>Writeup for CoinFlip<a class="anchor ms-1" href="#writeup-for-coinflip"></a></h1>
<ul>
<li>Hello h4ck3r, welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand Solidity well. For each challenge, they will deploy the contract and provide us with the instance of that contract. Our task is to interact with the contract and exploit it. Don&rsquo;t worry if you are completely new to Solidity and have never deployed a smart contract before. You can learn how to deploy a contract using Remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<p>This is a coin flipping game where you need to build up your winning streak by guessing the outcome of a coin flip. To complete this level, you&rsquo;ll need to use your psychic abilities to guess the correct outcome 10 times in a row.</p>]]></description></item><item><title>Fallout</title><link>https://s4bot3ur.github.io/blogs/ethernaut/fallout/</link><pubDate>Wed, 23 Oct 2024 00:56:52 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/fallout/</guid><description><![CDATA[<h1 id="writeup-for-fallout" data-numberify>Writeup for Fallout<a class="anchor ms-1" href="#writeup-for-fallout"></a></h1>
<ul>
<li>Hello h4ck3r welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand solidity well.For every challenge they will deploy the contract and give us the instance of that contract and we need to interact with the contract and exploit. Dont worry If you are completely new to solidity and you never deployed smart contract, you can learn deploying the a contract using remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>In this level the challenge is to become owner of the contract.</li>
</ul>

<h3 id="contract-explaination" data-numberify>Contract Explaination<a class="anchor ms-1" href="#contract-explaination"></a></h3>
<details style="margin-bottom: 0;">
    <summary style="cursor: pointer; background-color: #272822; color: #f8f8f2; padding: 0.5em; border-radius: 5px; margin-bottom: 0;">
        Click to view source contract
    </summary>
    <pre style="background-color: #272822; padding: 1em; border-radius: 5px; overflow: auto; margin-top: 0;">
        <code class="mermaid" style="color: #f8f8f2; display: block; margin-top: 0; padding-top: 0;"><div class="highlight"><pre tabindex="0" class="chroma"><code class="language-solidity" data-lang="solidity"><span class="line"><span class="ln"> 1</span><span class="cl"><span class="c1">// SPDX-License-Identifier: MIT
</span></span></span><span class="line"><span class="ln"> 2</span><span class="cl"><span class="c1"></span><span class="k">pragma solidity</span> <span class="o">^</span><span class="mi">0</span><span class="p">.</span><span class="mi">6</span><span class="p">.</span><span class="mi">0</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 3</span><span class="cl">
</span></span><span class="line"><span class="ln"> 4</span><span class="cl"><span class="kn">import</span> <span class="s">&#34;openzeppelin-contracts-06/math/SafeMath.sol&#34;</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 5</span><span class="cl">
</span></span><span class="line"><span class="ln"> 6</span><span class="cl"><span class="kd">contract</span> <span class="nc">Fallout</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln"> 7</span><span class="cl">    <span class="kn">using</span> <span class="n">SafeMath</span> <span class="k">for</span> <span class="kt">uint256</span><span class="p">;</span>
</span></span><span class="line"><span class="ln"> 8</span><span class="cl">
</span></span><span class="line"><span class="ln"> 9</span><span class="cl">    <span class="kd">mapping</span><span class="p">(</span><span class="kt">address</span> <span class="o">=&gt;</span> <span class="kt">uint256</span><span class="p">)</span> <span class="n">allocations</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">10</span><span class="cl">    <span class="kt">address</span> <span class="k">payable</span> <span class="k">public</span> <span class="n">owner</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">11</span><span class="cl">
</span></span><span class="line"><span class="ln">12</span><span class="cl">    <span class="cm">/* constructor */</span>
</span></span><span class="line"><span class="ln">13</span><span class="cl">    <span class="kd">function</span> <span class="nf">Fal1out</span><span class="p">()</span> <span class="k">public</span> <span class="k">payable</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">14</span><span class="cl">        <span class="n">owner</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">15</span><span class="cl">        <span class="n">allocations</span><span class="p">[</span><span class="n">owner</span><span class="p">]</span> <span class="o">=</span> <span class="nb">msg</span><span class="p">.</span><span class="nb">value</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">16</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">17</span><span class="cl">
</span></span><span class="line"><span class="ln">18</span><span class="cl">    <span class="kd">modifier</span> <span class="nf">onlyOwner</span><span class="p">()</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">19</span><span class="cl">        <span class="nb">require</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span> <span class="o">==</span> <span class="n">owner</span><span class="p">,</span> <span class="s">&#34;caller is not the owner&#34;</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">20</span><span class="cl">        <span class="k">_</span><span class="p">;</span>
</span></span><span class="line"><span class="ln">21</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">22</span><span class="cl">
</span></span><span class="line"><span class="ln">23</span><span class="cl">    <span class="kd">function</span> <span class="nf">allocate</span><span class="p">()</span> <span class="k">public</span> <span class="k">payable</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">24</span><span class="cl">        <span class="n">allocations</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">]</span> <span class="o">=</span> <span class="n">allocations</span><span class="p">[</span><span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">].</span><span class="n">add</span><span class="p">(</span><span class="nb">msg</span><span class="p">.</span><span class="nb">value</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">25</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">26</span><span class="cl">
</span></span><span class="line"><span class="ln">27</span><span class="cl">    <span class="kd">function</span> <span class="nf">sendAllocation</span><span class="p">(</span><span class="kt">address</span> <span class="k">payable</span> <span class="n">allocator</span><span class="p">)</span> <span class="k">public</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">28</span><span class="cl">        <span class="nb">require</span><span class="p">(</span><span class="n">allocations</span><span class="p">[</span><span class="n">allocator</span><span class="p">]</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">29</span><span class="cl">        <span class="n">allocator</span><span class="p">.</span><span class="nb">transfer</span><span class="p">(</span><span class="n">allocations</span><span class="p">[</span><span class="n">allocator</span><span class="p">]);</span>
</span></span><span class="line"><span class="ln">30</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">31</span><span class="cl">
</span></span><span class="line"><span class="ln">32</span><span class="cl">    <span class="kd">function</span> <span class="nf">collectAllocations</span><span class="p">()</span> <span class="k">public</span> <span class="n">onlyOwner</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">33</span><span class="cl">        <span class="nb">msg</span><span class="p">.</span><span class="nb">sender</span><span class="p">.</span><span class="nb">transfer</span><span class="p">(</span><span class="kt">address</span><span class="p">(</span><span class="nb">this</span><span class="p">).</span><span class="nb">balance</span><span class="p">);</span>
</span></span><span class="line"><span class="ln">34</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">35</span><span class="cl">
</span></span><span class="line"><span class="ln">36</span><span class="cl">    <span class="kd">function</span> <span class="nf">allocatorBalance</span><span class="p">(</span><span class="kt">address</span> <span class="n">allocator</span><span class="p">)</span> <span class="k">public</span> <span class="k">view</span> <span class="k">returns</span> <span class="p">(</span><span class="kt">uint256</span><span class="p">)</span> <span class="p">{</span>
</span></span><span class="line"><span class="ln">37</span><span class="cl">        <span class="k">return</span> <span class="n">allocations</span><span class="p">[</span><span class="n">allocator</span><span class="p">];</span>
</span></span><span class="line"><span class="ln">38</span><span class="cl">    <span class="p">}</span>
</span></span><span class="line"><span class="ln">39</span><span class="cl"><span class="p">}</span>
</span></span></code></pre></div></code>
    </pre>
</details>

<ul>
<li>
<p>If you feel like you understood the contract you can move to the <a href="/blogs/ethernaut/fallout/#exploit">exploit</a> part. If you are a begineer please go through contract Explaination also. It will help you to understand the solidity better.</p>]]></description></item><item><title>Fallback</title><link>https://s4bot3ur.github.io/blogs/ethernaut/fallback/</link><pubDate>Wed, 23 Oct 2024 00:55:33 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/fallback/</guid><description><![CDATA[<h1 id="writeup-for-fallback" data-numberify>Writeup for Fallback<a class="anchor ms-1" href="#writeup-for-fallback"></a></h1>
<ul>
<li>Hello h4ck3r welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand solidity well.For every challenge they will deploy the contract and give us the instance of that contract and we need to interact with the contract and exploit. Dont worry If you are completely new to solidity and you never deployed smart contract, you can learn deploying the a contract using remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>In this level our task is claim ownership of this contract and make the balance of the contract to zero.</li>
</ul>

<h3 id="solution" data-numberify>Solution<a class="anchor ms-1" href="#solution"></a></h3>
<ul>
<li>
<p>First i will explain every function in the contract.</p>]]></description></item><item><title>Hello Ethernaut</title><link>https://s4bot3ur.github.io/blogs/ethernaut/hello-ethernaut/</link><pubDate>Wed, 23 Oct 2024 00:36:58 +0530</pubDate><guid>https://s4bot3ur.github.io/blogs/ethernaut/hello-ethernaut/</guid><description><![CDATA[<h1 id="writeup-for-hello-ethernaut" data-numberify>Writeup for Hello Ethernaut<a class="anchor ms-1" href="#writeup-for-hello-ethernaut"></a></h1>
<ul>
<li>Hello h4ck3r welcome to the world of smart contract hacking. Solving the challenges from Ethernaut will help you understand solidity well.For every challenge they will deploy the contract and give us the instance of that contract and we need to interact with the contract and exploit. Dont worry If you are completely new to solidity and you never deployed smart contract, you can learn deploying the a contract using remix <a href="https://youtu.be/3xNFZI8Ste4?si=i3cWN87OpX85zp6k" target="_blank" rel="noopener noreferrer">here<i class="fas fa-external-link-square-alt ms-1"></i></a>.</li>
</ul>

<h3 id="challenge" data-numberify>Challenge<a class="anchor ms-1" href="#challenge"></a></h3>
<ul>
<li>In this level the challenge is to call some functions from the given deployed contract.</li>
</ul>

<h3 id="solution" data-numberify>Solution<a class="anchor ms-1" href="#solution"></a></h3>
<ul>
<li>
<p>In order to solve this challege you need to interact with some functions in the deployed contract. You need to open developer tools and then you can interact with the functions in the contract using console. You can enter <code>Ctrl+Shift+J</code> to open developer tools</p>]]></description></item></channel></rss>